#include <string>

using namespace std;

class fraction {
private:
	// - - - - -
	int numerator;
	int denominator;
	// - - - - -
	int NOD(int a, int b) {
		while (b > 0) {
        		int c = a % b;
        		a = b;
        		b = c;
    		}
   		return a;
	}
	// - - - - -
	void cut_back() {
		int c = NOD(numerator, denominator);
		numerator /= c;
		denominator /= c;
		if (denominator < 0) {
			numerator *= -1;
			denominator *= -1;
		}
	}
	// - - - - -
public:
	// - - - - -
	fraction() { this->set(); };
	fraction(int a) { this->set(a); };
	fraction(double a) { this->set(a); };
	fraction(int a, int b) { this->set(a, b); };
	fraction(double a, double b) { this->set(a, b); };
	fraction(int a, double b) { this->set(a, b); };
	fraction(double a, int b) { this->set(a, b); };
	// - - - - -
	void set() {
		numerator = 1;
		denominator = 1;
	}
	void set(int a) {
		numerator = a;
		denominator = 1;
	}
	void set(int a, int b) {
		numerator = a;
		denominator = b;
		cut_back();
	}
	void set(double a) {
		int b = 1;
		for (int i = 0; (int)a != a; i++)
		{
			a *= 10;
			b *= 10;
		}
		numerator = (int)a;
		denominator = b;
		cut_back();
	}
	void set(double a, double b) {
		for (int i = 0; ((int)a != a || (int)b != b); i++)
		{
			a *= 10;
			b *= 10;
		}
		numerator = (int)a;
		denominator = (int)b;
		cut_back();
	}
	void set(int a, double b) {
		for (int i = 0; ((int)a != a || (int)b != b); i++)
		{
			a *= 10;
			b *= 10;
		}
		numerator = a;
		denominator = (int)b;
		cut_back();
	}
	void set(double a, int b) {
		for (int i = 0; ((int)a != a || (int)b != b); i++)
		{
			a *= 10;
			b *= 10;
		}
		numerator = (int)a;
		denominator = b;
		cut_back();
	}
	// - - - - -
	string get() {
		if (denominator == 1) return to_string(numerator);
		else if (denominator == 0) return to_string(INFINITY);
		else if (numerator == 0) return "0";
		else return to_string(numerator) + '/' + to_string(denominator);
	}
	double get_double() {
		if (denominator == 1) return (double)numerator;
		else if (denominator == 0) return INFINITY;
		else if (numerator == 0) return (double)0;
		else return (double)numerator / denominator;
	}
	int get_int() {
		if (denominator == 1) return numerator;
		else if (denominator == 0) return INFINITY;
		else if (numerator == 0) return 0;
		else return numerator / denominator;
	}
	// - - - - -
	fraction operator + (fraction a) {
		fraction b;
		b.set(numerator*a.denominator + a.numerator*denominator, denominator*a.denominator);
		return b;
	}
	fraction operator + (int a) {
		fraction b;
		b.set(numerator + a * denominator, denominator);
		return b;
	}
	fraction operator + (double a) {
		fraction b;
		b.set(a);
		b.set(numerator*b.denominator + b.numerator*denominator, denominator*b.denominator);
		return b;
	}
	fraction operator += (fraction a) {
		set(numerator*a.denominator + a.numerator*denominator, denominator*a.denominator);
		return *this;
	}
	fraction operator += (int a) {
		this->set(numerator + a * denominator, denominator);
		return *this;
	}
	fraction operator += (double a) {
		fraction b;
		b.set(a);
		this->set(numerator*b.denominator + b.numerator*denominator, denominator*b.denominator);
		return *this;
	}
	// - - - - -
	fraction operator - (fraction a) {
		fraction b;
		b.set(numerator*a.denominator - a.numerator*denominator, denominator*a.denominator);
		return b;
	}
	fraction operator - (int a) {
		fraction b;
		b.set(numerator - a * denominator, denominator);
		return b;
	}
	fraction operator - (double a) {
		fraction b;
		b.set(a);
		b.set(numerator*b.denominator - b.numerator*denominator, denominator*b.denominator);
		return b;
	}
	fraction operator -= (fraction a) {
		this->set(numerator*a.denominator - a.numerator*denominator, denominator*a.denominator);
		return *this;
	}
	fraction operator -= (int a) {
		this->set(numerator - a * denominator, denominator);
		return *this;
	}
	fraction operator -= (double a) {
		fraction b;
		b.set(a);
		this->set(numerator*b.denominator - b.numerator*denominator, denominator*b.denominator);
		return *this;
	}
	// - - - - -
	fraction operator * (fraction a) {
		fraction b;
		b.set(numerator*a.numerator, denominator*a.denominator);
		return b;
	}
	fraction operator *= (fraction a) {
		this->set(numerator*a.numerator, denominator*a.denominator);
		return *this;
	}
	// - - - - -
	fraction operator / (fraction a) {
		fraction b;
		b.set(numerator*a.denominator, denominator*a.numerator);
		return b;
	}
	fraction operator /= (fraction a) {
		this->set(numerator*a.denominator, denominator*a.numerator);
		return *this;
	}
	// - - - - -
	bool operator > (fraction a) {
		if (numerator*a.denominator > a.numerator*denominator) return true;
		return false;
	}
	bool operator < (fraction a) {
		if (numerator*a.denominator < a.numerator*denominator) return true;
		return false;
	}
	bool operator >= (fraction a) {
		if (numerator*a.denominator >= a.numerator*denominator) return true;
		return false;
	}
	bool operator <= (fraction a) {
		if (numerator*a.denominator <= a.numerator*denominator) return true;
		return false;
	}
	bool operator == (fraction a) {
		if (numerator*a.denominator == a.numerator*denominator) return true;
		return false;
	}
	bool operator != (fraction a) {
		if (numerator*a.denominator != a.numerator*denominator) return true;
		return false;
	}

	bool operator > (double a) {
		if ((double)numerator / denominator > a) return true;
		return false;
	}
	bool operator < (double a) {
		if ((double)numerator / denominator < a) return true;
		return false;
	}
	bool operator >= (double a) {
		if ((double)numerator / denominator >= a) return true;
		return false;
	}
	bool operator <= (double a) {
		if ((double)numerator / denominator <= a) return true;
		return false;
	}
	bool operator == (double a) {
		if ((double)numerator / denominator == a) return true;
		return false;
	}
	bool operator != (double a) {
		if ((double)numerator / denominator != a) return true;
		return false;
	}

	bool operator > (int a) {
		if ((double)numerator / denominator > a) return true;
		return false;
	}
	bool operator < (int a) {
		if ((double)numerator / denominator < a) return true;
		return false;
	}
	bool operator >= (int a) {
		if ((double)numerator / denominator >= a) return true;
		return false;
	}
	bool operator <= (int a) {
		if ((double)numerator / denominator <= a) return true;
		return false;
	}
	bool operator == (int a) {
		if ((double)numerator / denominator == a) return true;
		return false;
	}
	bool operator != (int a) {
		if ((double)numerator / denominator != a) return true;
		return false;
	}
	// - - - - -
	fraction operator = (fraction a) {
		this->set(a.denominator, a.numerator);
		return *this;
	}
	fraction operator = (double a) {
		this->set(a);
		return *this;
	}
	fraction operator = (int a) {
		this->set(a);
		return *this;
	}
};
