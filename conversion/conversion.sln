#include <string> 

class conversion {
private:
	int number;
	int footing;
	std::string convert() {
		std::string c = "";
		int a = number;
		for (int i = 0; a > 0; i++)
		{
			if ((a % footing) < 10) {
				c = std::to_string(a % footing) + c;
			}
			else {
				c = (char)((a % footing) + 87) + c;
			}
			a /= footing;
		}
		return c;
	}

	int deconvert(std::string a, int b) {
		int c = 0;
		int p = 1;
		for (int i = (int)a.length() - 1; i >= 0; i--)
		{
			if (((int)a[i] - 48) > 9) {
				c += ((int)a[i] - 87)*p;
			}
			else {
				c += ((int)a[i] - 48)*p;
			}
			p *= b;
		}
		return c;
	}
public:
	bool set(int a, int b) {
		if (a > 0 && b > 0 && b < 37) {
			number = a;
			footing = b;
			return true;
		}
		return false;
	}
	bool set(std::string a, int b, int c) {
		if (b > 0 && b < 37) {
			number = deconvert(a, b);
			footing = c;
			return true;
		}
		return false;
	}
	std::string get() {
		return convert();
	}
	
	// - - - - -
	conversion operator + (conversion a) {
		conversion b;
		bool c = b.set(a.number + this->number, this->footing);
		if (!c){
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator + (int a) {
		conversion b;
		bool c = b.set(a + this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator += (conversion a) {
		bool c = this->set(a.number + this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	conversion operator += (int a) {
		bool c = this->set(a + this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	// - - - - -
	conversion operator - (conversion a) {
		conversion b;
		bool c = b.set(a.number - this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator - (int a) {
		conversion b;
		bool c = b.set(a - this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator -= (conversion a) {
		bool c = this->set(a.number - this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	conversion operator -= (int a) {
		bool c = this->set(a - this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	// - - - - -
	conversion operator * (conversion a) {
		conversion b;
		bool c = b.set(a.number * this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator * (int a) {
		conversion b;
		bool c = b.set(a * this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator *= (conversion a) {
		bool c = this->set(a.number * this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	conversion operator *= (int a) {
		bool c = this->set(a * this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	// - - - - -
	conversion operator / (conversion a) {
		conversion b;
		bool c = b.set(a.number / this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator / (int a) {
		conversion b;
		bool c = b.set(a / this->number, this->footing);
		if (!c) {
			b.set(0, this->footing);
		}
		return b;
	}
	conversion operator /= (conversion a) {
		bool c = this->set(a.number / this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	conversion operator /= (int a) {
		bool c = this->set(a / this->number, this->footing);
		if (!c) {
			this->set(0, this->footing);
		}
		return *this;
	}
	// - - - - -
	bool operator > (conversion a) {
		if (this->number > a.number) return true;
		return false;
	}
	bool operator >= (conversion a) {
		if (this->number >= a.number) return true;
		return false;
	}
	bool operator < (conversion a) {
		if (this->number < a.number) return true;
		return false;
	}
	bool operator <= (conversion a) {
		if (this->number <= a.number) return true;
		return false;
	}
	bool operator > (int a) {
		if (this->number > a) return true;
		return false;
	}
	bool operator >= (int a) {
		if (this->number >= a) return true;
		return false;
	}
	bool operator < (int a) {
		if (this->number < a) return true;
		return false;
	}
	bool operator <= (int a) {
		if (this->number <= a) return true;
		return false;
	}
	bool operator == (conversion a) {
		if (this->number == a.number) return true;
		return false;
	}
	bool operator == (int a) {
		if (this->number == a) return true;
		return false;
	}
	bool operator != (conversion a) {
		if (this->number != a.number) return true;
		return false;
	}
	bool operator != (int a) {
		if (this->number != a) return true;
		return false;
	}
	conversion operator = (conversion a) {
		this->set(a.number, a.footing);
		return *this;
	}
	conversion operator = (int a) {
		this->set(a, 10);
		return *this;
	}
};
